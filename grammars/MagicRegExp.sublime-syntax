%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: MagicRegExp
file_extensions:
  - re
scope: source.regexp.python
contexts:
  main:
    - include: regexp-expression
  codetags:
    - match: (?:\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\b)
      captures:
        1: keyword.codetag.notation.python
  fregexp-base-expression:
    - include: fregexp-quantifier
    - include: fstring-formatting-braces
    - match: '\{.*?\}'
    - include: regexp-base-common
  fregexp-quantifier:
    - match: |-
        (?x)
        \{\{(
          \d+ | \d+,(\d+)? | ,\d+
        )\}\}
      scope: keyword.operator.quantifier.regexp
  fstring-formatting-braces:
    - match: '({)(\s*?)(})'
      comment: empty braces are illegal
      captures:
        1: constant.character.format.placeholder.other.python
        2: invalid.illegal.brace.python
        3: constant.character.format.placeholder.other.python
    - match: "({{|}})"
      scope: constant.character.escape.python
  regexp-backreference:
    - match: |-
        (?x)
        (\()  (\?P= \w+(?:\s+[[:alnum:]]+)?)  (\))
      scope: meta.backreference.named.regexp
      captures:
        1: support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp
        2: entity.name.tag.named.backreference.regexp
        3: support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp
  regexp-backreference-number:
    - match: '(\\[1-9]\d?)'
      scope: meta.backreference.regexp
      captures:
        1: entity.name.tag.backreference.regexp
  regexp-base-common:
    - match: \.
      scope: support.other.match.any.regexp
    - match: \^
      scope: support.other.match.begin.regexp
    - match: \$
      scope: support.other.match.end.regexp
    - match: '[+*?]\??'
      scope: keyword.operator.quantifier.regexp
    - match: \|
      scope: keyword.operator.disjunction.regexp
    - include: regexp-escape-sequence
  regexp-base-expression:
    - include: regexp-quantifier
    - include: regexp-base-common
  regexp-character-set:
    - match: |-
        (?x)
        \[ \^? \] (?! .*?\])
    - match: '(\[)(\^)?(\])?'
      captures:
        1: punctuation.character.set.begin.regexp constant.other.set.regexp
        2: keyword.operator.negation.regexp
        3: constant.character.set.regexp
      push:
        - meta_scope: meta.character.set.regexp
        - match: '(\])'
          captures:
            1: punctuation.character.set.end.regexp constant.other.set.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-charecter-set-escapes
        - match: '[^\n]'
          scope: constant.character.set.regexp
  regexp-charecter-set-escapes:
    - match: '\\[abfnrtv\\]'
      scope: constant.character.escape.regexp
    - include: regexp-escape-special
    - match: '\\([0-7]{1,3})'
      scope: constant.character.escape.regexp
    - include: regexp-escape-character
    - include: regexp-escape-unicode
    - include: regexp-escape-catchall
  regexp-comments:
    - match: '\(\?#'
      captures:
        0: punctuation.comment.begin.regexp
      push:
        - meta_scope: comment.regexp
        - match: (\))
          captures:
            1: punctuation.comment.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: codetags
  regexp-conditional:
    - match: '(\()\?\((\w+(?:\s+[[:alnum:]]+)?|\d+)\)'
      captures:
        0: keyword.operator.conditional.regexp
        1: punctuation.parenthesis.conditional.begin.regexp
      push:
        - match: (\))
          captures:
            1: keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-expression
  regexp-escape-catchall:
    - match: \\(.|\n)
      scope: constant.character.escape.regexp
  regexp-escape-character:
    - match: |-
        (?x)
        \\ (
              x[0-9A-Fa-f]{2}
              | 0[0-7]{1,2}
              | [0-7]{3}
           )
      scope: constant.character.escape.regexp
  regexp-escape-sequence:
    - include: regexp-escape-special
    - include: regexp-escape-character
    - include: regexp-escape-unicode
    - include: regexp-backreference-number
    - include: regexp-escape-catchall
  regexp-escape-special:
    - match: '\\([AbBdDsSwWZ])'
      scope: support.other.escape.special.regexp
  regexp-escape-unicode:
    - match: |-
        (?x)
        \\ (
              u[0-9A-Fa-f]{4}
              | U[0-9A-Fa-f]{8}
           )
      scope: constant.character.unicode.regexp
  regexp-expression:
    - include: regexp-base-expression
    - include: regexp-character-set
    - include: regexp-comments
    - include: regexp-flags
    - include: regexp-named-group
    - include: regexp-backreference
    - include: regexp-lookahead
    - include: regexp-lookahead-negative
    - include: regexp-lookbehind
    - include: regexp-lookbehind-negative
    - include: regexp-conditional
    - include: regexp-parentheses-non-capturing
    - include: regexp-parentheses
  regexp-flags:
    - match: '\(\?[aiLmsux]+\)'
      scope: storage.modifier.flag.regexp
  regexp-lookahead:
    - match: (\()\?=
      captures:
        0: keyword.operator.lookahead.regexp
        1: punctuation.parenthesis.lookahead.begin.regexp
      push:
        - match: (\))
          captures:
            1: keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-expression
  regexp-lookahead-negative:
    - match: (\()\?!
      captures:
        0: keyword.operator.lookahead.negative.regexp
        1: punctuation.parenthesis.lookahead.begin.regexp
      push:
        - match: (\))
          captures:
            1: keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-expression
  regexp-lookbehind:
    - match: (\()\?<=
      captures:
        0: keyword.operator.lookbehind.regexp
        1: punctuation.parenthesis.lookbehind.begin.regexp
      push:
        - match: (\))
          captures:
            1: keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-expression
  regexp-lookbehind-negative:
    - match: (\()\?<!
      captures:
        0: keyword.operator.lookbehind.negative.regexp
        1: punctuation.parenthesis.lookbehind.begin.regexp
      push:
        - match: (\))
          captures:
            1: keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-expression
  regexp-named-group:
    - match: |-
        (?x)
        (\()  (\?P <\w+(?:\s+[[:alnum:]]+)?>)
      captures:
        1: support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp
        2: entity.name.tag.named.group.regexp
      push:
        - meta_scope: meta.named.regexp
        - match: (\))
          captures:
            1: support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-expression
  regexp-parentheses:
    - match: \(
      captures:
        0: support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp
      push:
        - match: (\))
          captures:
            1: support.other.parenthesis.regexp punctuation.parenthesis.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-expression
  regexp-parentheses-non-capturing:
    - match: '\(\?:'
      captures:
        0: support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp
      push:
        - match: (\))
          captures:
            1: support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp
            2: invalid.illegal.newline.python
          pop: true
        - include: regexp-expression
  regexp-quantifier:
    - match: |-
        (?x)
        \{(
          \d+ | \d+,(\d+)? | ,\d+
        )\}
      scope: keyword.operator.quantifier.regexp
